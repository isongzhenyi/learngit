package com.honli.hp.it.proxy;

import java.lang.reflect.Proxy;

import org.junit.Test;

public class AppTest
{
	@Test
	/*
	 测试静态代理
	 这种代理模式也最为简单，就是通过proxy持有realObject的引用，并进行一层封装。
	 优点：可以做到不对目标对象进行修改的前提下，对目标对象进行功能的扩展和拦截。
　　  缺点：因为代理对象，需要实现与目标对象一样的接口，会导致代理类十分繁多，不易维护，同时一旦接口增加方法，则目标对象和代理类都需要维护。
	 * */
    public void testStaticProxy()
	{
		
		ProxyInterface targe = new ProxyInterfaceImpl();
		
		ProxyInterface proxyOjbect = new ProxyObjectStatic(targe);
		
		proxyOjbect.doSomeThing();
	}
	
	@Test
	public void testDynamicProxy()
	{
       ProxyInterface tar = new ProxyInterfaceImpl();
		
		ProxyInterface proxyOjbect =   (ProxyInterface) Proxy.newProxyInstance(tar.getClass().getClassLoader(), tar.getClass().getInterfaces(), new ExtensionObject(tar)) ;
		
		proxyOjbect.doSomeThing();
	}
}
